<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>leetcode-OneQuestionPerDay</title>
      <link href="/2021/11/15/leetcode-onequestionperday/"/>
      <url>/2021/11/15/leetcode-onequestionperday/</url>
      
        <content type="html"><![CDATA[<h1 id="一、每日一题"><a href="#一、每日一题" class="headerlink" title="一、每日一题"></a>一、每日一题</h1><h2 id="第一周：11-15-gt-11-21"><a href="#第一周：11-15-gt-11-21" class="headerlink" title="第一周：11.15 -> 11.21"></a>第一周：11.15 -&gt; 11.21</h2><h3 id="1-灯泡开关"><a href="#1-灯泡开关" class="headerlink" title="1.灯泡开关"></a>1.灯泡开关</h3><p><img src="https://i.loli.net/2021/11/21/HDZq2i56QoYjgCR.png"></p><p><strong>方法一:暴力</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">bulbSwitch</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    bool arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> true<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">!</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O($n^2$)。</li><li>空间复杂度：O(1)。</li></ul><p><strong>方法二：数学法</strong></p><p><img src="https://i.loli.net/2021/11/21/CNpxbPU9okhWXIu.png"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">bulbSwitch</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(1)。</li><li>空间复杂度：O(1)。</li></ul><h3 id="2-完美矩形"><a href="#2-完美矩形" class="headerlink" title="2.完美矩形"></a>2.<a href="https://leetcode-cn.com/problems/perfect-rectangle/">完美矩形</a></h3><p><img src="https://i.loli.net/2021/11/21/c74lApw3LGvEnWi.png"></p><p><img src="https://i.loli.net/2021/11/21/jevJcE7aHwFV4ri.png"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//存储坐标点(x,y)</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> Point<span class="token punctuation">;</span>class Solution <span class="token punctuation">{</span>public<span class="token operator">:</span>    bool <span class="token function">isRectangleCover</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span><span class="token operator">&amp;</span> rectangles<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//记录各点的出现次数</span>        map<span class="token operator">&lt;</span>Point<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> cnt<span class="token punctuation">;</span>        <span class="token keyword">int</span> minX <span class="token operator">=</span> rectangles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> minY <span class="token operator">=</span> rectangles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> maxX <span class="token operator">=</span> rectangles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> maxY <span class="token operator">=</span> rectangles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> area <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//遍历每个数组：累加小矩阵面积，获得四个角点坐标，记录小矩阵角点次数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span> rect <span class="token operator">:</span> rectangles<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> rect<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y <span class="token operator">=</span> rect<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a <span class="token operator">=</span> rect<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b <span class="token operator">=</span> rect<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            area <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            minX <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> minX<span class="token punctuation">)</span><span class="token punctuation">;</span>            minY <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> minY<span class="token punctuation">)</span><span class="token punctuation">;</span>            maxX <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> maxX<span class="token punctuation">)</span><span class="token punctuation">;</span>            maxY <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> maxY<span class="token punctuation">)</span><span class="token punctuation">;</span>            Point <span class="token function">point1</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span> y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Point <span class="token function">point2</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span> b<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Point <span class="token function">point3</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">,</span> y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Point <span class="token function">point4</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">,</span> b<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cnt<span class="token punctuation">[</span>point1<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            cnt<span class="token punctuation">[</span>point2<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            cnt<span class="token punctuation">[</span>point3<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            cnt<span class="token punctuation">[</span>point4<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//大矩阵的四个顶点</span>        Point <span class="token function">pointMinMin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>minX<span class="token punctuation">,</span> minY<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Point <span class="token function">pointMinMax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>minX<span class="token punctuation">,</span> maxY<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Point <span class="token function">pointMaxMin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>maxX<span class="token punctuation">,</span> minY<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Point <span class="token function">pointMaxMax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>maxX<span class="token punctuation">,</span> maxY<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//条件1：各矩阵面积等于大矩阵面积</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>area <span class="token operator">!=</span> <span class="token punctuation">(</span>maxX <span class="token operator">-</span> minX<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>maxY <span class="token operator">-</span> minY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//条件2：(1)大矩阵四个顶点出现1次</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>pointMinMin<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">||</span> cnt<span class="token punctuation">[</span>pointMinMax<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">||</span> cnt<span class="token punctuation">[</span>pointMaxMin<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">||</span> cnt<span class="token punctuation">[</span>pointMaxMax<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//条件2：(2)所有角点(除了大矩阵的四个顶点)，出现2或者4次</span>        cnt<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>pointMinMin<span class="token punctuation">)</span><span class="token punctuation">;</span>        cnt<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>pointMinMax<span class="token punctuation">)</span><span class="token punctuation">;</span>        cnt<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>pointMaxMin<span class="token punctuation">)</span><span class="token punctuation">;</span>        cnt<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>pointMaxMax<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span> entry <span class="token operator">:</span> cnt<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> value <span class="token operator">=</span> entry<span class="token punctuation">.</span>second<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> value <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> false<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)。</li><li>空间复杂度：O(n)。</li></ul><h3 id="3-最大单词长度乘积"><a href="#3-最大单词长度乘积" class="headerlink" title="3.最大单词长度乘积"></a>3.最大单词长度乘积</h3><p><img src="https://i.loli.net/2021/11/21/PREAv87BuVCNWOM.png"></p><p>方法一：暴力</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token operator">:</span>    bool <span class="token function">isNotSameElem</span><span class="token punctuation">(</span>string word1<span class="token punctuation">,</span> string word2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> word1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>word2<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>word1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> string<span class="token operator">::</span>npos<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> false<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token operator">&amp;</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span> word1 <span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span> word2 <span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>word1 <span class="token operator">==</span> word2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNotSameElem</span><span class="token punctuation">(</span>word1<span class="token punctuation">,</span> word2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> len <span class="token operator">=</span> word1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> word2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/11/21/Qqh5AfXyBJgcPSv.png"></p><p>方法二：位运算</p><p><img src="https://i.loli.net/2021/11/21/KEYeWS6tLVw8M9s.png"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token operator">&amp;</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// vector&lt;int&gt; masks(size);</span>        <span class="token keyword">int</span> masks<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>masks<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>masks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            string word <span class="token operator">=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> wordSize <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> wordSize<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                masks<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>word<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>masks<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> masks<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> len <span class="token operator">=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> words<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>sizeof知识点补充：</strong></p><p>sizeof以字节为单位给出对象的大小：</p><blockquote><ul><li><p>整型数组</p><ul><li>```c<br>int fwre[] = {1,2,3};<br>cout &lt;&lt; sizeof(fwre) &lt;&lt; endl;//3*4=12<pre class="line-numbers language-none"><code class="language-none">- 字符数组  - sizeof:    ```c    char tret[20] = "fhtgdg";    cout &lt;&lt; sizeof(tret) &lt;&lt; endl;//20 * 1 = 20    cout &lt;&lt; strlen(tret) &lt;&lt; endl;//6    cout &lt;&lt; sizeof(char) &lt;&lt; endl;//1        #define PARAMETER "YOU ARE PERSON."(15个字符)    cout &lt;&lt; sizeof(PARAMETER) &lt;&lt; endl;//16 * 1 = 16； 因为还有一个‘\0’结束符    cout &lt;&lt; strlen(PARAMETER) &lt;&lt; endl;//15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></blockquote><p> <a href="https://blog.csdn.net/Namcodream521/article/details/85315955">进阶</a>：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> ca<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"123456"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>pca <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(ca)=%d,sizeof(pca)=%d,sizeof(*pca)=%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ca<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>pca<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pca<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> cb<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>pcb<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(cb)=%d,sizeof(pcb)=%d,sizeof(*pcb)=%d,sizeof(**pcb)=%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>pcb<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pcb<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>pcb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//32位</span>$ gcc sz<span class="token punctuation">.</span>c <span class="token operator">-</span>o sz <span class="token operator">-</span>m32<span class="token punctuation">[</span>nereus@nereusp cpp<span class="token punctuation">]</span>$ <span class="token punctuation">.</span><span class="token operator">/</span>sz<span class="token keyword">sizeof</span><span class="token punctuation">(</span>ca<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>pca<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pca<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>pcb<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pcb<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>pcb<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment">//64位</span>$ gcc sz<span class="token punctuation">.</span>c <span class="token operator">-</span>o sz$ <span class="token punctuation">.</span><span class="token operator">/</span>sz<span class="token keyword">sizeof</span><span class="token punctuation">(</span>ca<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>pca<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pca<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>pcb<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>pcb<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span>pcb<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>sizeof(数组名)：返回的是数组的大小(<strong>一维字符数组有字符结束符，二维没有</strong>)</li><li>sizeof(一维数组指针)：返回的是数组单个元素指针的大小，即系统指针的长度，32位系统为4，64位系统位8</li><li>sizeof(*一维数组指针)：返回的是数组单个元素对应类型的大小</li><li>sizeof(二维数组指针)：返回的是二维数组行指针的大小，32位系统为行数×4，64位系统位行数×8<ul><li>sizeof(pcb)等同于sizeof(pcb[0])+sizeof(pcb[1])+sizeof(pcb[2])（32位系统）</li></ul></li><li>sizeof(*二维数组指针)：返回的是系统指针的长度，32位系统为4，64位系统位8</li><li>sizeof(**二维数组指针)：返回的是数组单个元素指针的大小，即char的大小</li></ul></blockquote><p><strong><a href="https://www.cplusplus.com/reference/cstring/memset/">memset函数讲解</a>：</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token operator">*</span> <span class="token function">memset</span> <span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span> ptr<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token class-name">size_t</span> num <span class="token punctuation">)</span><span class="token punctuation">;</span>Sets the first num bytes of the block of memory pointed by ptr to the specified <span class="token function">value</span> <span class="token punctuation">(</span>interpreted as an <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">.</span>当给<span class="token keyword">int</span>数组初始化的话：<span class="token keyword">int</span> masks<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//数组必须初始化，否则相应地址里的值就是原本的值，不是自己赋的值</span>初始化为<span class="token number">0</span>：方法一：<span class="token keyword">int</span> ma<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//第一个为0，后面就默认都初始化为0</span>方法二：<span class="token function">memset</span><span class="token punctuation">(</span>masks<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>masks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//masks={0,0,0,0,0};</span>初始化为<span class="token number">1</span>：只能循环赋值，不能使用上述方法一和二<span class="token keyword">int</span> ma<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">//masks={1,0,0,0,0};</span><span class="token function">memset</span><span class="token punctuation">(</span>masks<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>masks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//masks={16843009,16843009,16843009,16843009,16843009};</span>因为根据memset的定义，是每一个字节的首位赋值为value<span class="token punctuation">,</span>又因为<span class="token keyword">int</span>型是<span class="token number">4</span>个字节，所以总共<span class="token number">20</span>个字节，运行函数之后是：<span class="token punctuation">{</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-二叉树的坡度"><a href="#4-二叉树的坡度" class="headerlink" title="4.二叉树的坡度"></a>4.二叉树的坡度</h3><p><img src="https://i.loli.net/2021/11/21/3CqvQ4se8HO2Pgu.png"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/** * Definition for a binary tree node. * struct TreeNode { *     int val; *     struct TreeNode *left; *     struct TreeNode *right; * }; */</span><span class="token keyword">int</span> res<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> lsum <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rsum <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token operator">-&gt;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    res <span class="token operator">+=</span> <span class="token function">abs</span><span class="token punctuation">(</span>lsum <span class="token operator">-</span> rsum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> lsum <span class="token operator">+</span> rsum <span class="token operator">+</span> node<span class="token operator">-&gt;</span>val<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">findTilt</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>    res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-整数替换"><a href="#5-整数替换" class="headerlink" title="5.整数替换"></a>5.整数替换</h3><p><img src="https://i.loli.net/2021/11/21/8UkSLAGatQcevnI.png"></p><p>方法一：BFS</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">integerReplacement</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> steps <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">long</span> num <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> steps<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            steps<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：递归</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">integerReplacement</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">integerReplacement</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token function">fmin</span><span class="token punctuation">(</span><span class="token function">integerReplacement</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">integerReplacement</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-最长和谐子序列"><a href="#6-最长和谐子序列" class="headerlink" title="6.最长和谐子序列"></a>6.最长和谐子序列</h3><p><img src="https://i.loli.net/2021/11/21/q56KajJuR3W4Bfz.png"></p><p>方法一：滑动窗口</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    int findLHS(vector&lt;int&gt;&amp; nums) {        sort(nums.begin(), nums.end());        int size = nums.size();        int begin = 0;        int res = 0;        for (int end = 0; end &lt; size; end++) {                        //更新窗口长度            //不能大于是因为可能整个数组的差都不大于1：【1，2，2，1】            if (nums[end] == nums[begin] + 1) {                res = max(res, end - begin + 1);            }            //开始新的窗口            while (nums[begin] &lt; nums[end] - 1) {                begin++;            }        }        return res;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：哈希表</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution {public:    int findLHS(vector&lt;int&gt;&amp; nums) {        map&lt;int, int&gt; m;        int res = 0;        for (int num : nums) {            m[num]++;        }        for (auto [key, value] : m) {            if (m.count(key + 1)) {                res = max(res, value + m[key + 1]);            }        }        return res;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-N叉树的最大深度"><a href="#7-N叉树的最大深度" class="headerlink" title="7.N叉树的最大深度"></a>7.N叉树的最大深度</h3><p><img src="https://i.loli.net/2021/11/21/ywEAUu3F2ZOInig.png"></p><p><img src="https://i.loli.net/2021/11/21/wXFTljphuHfgUob.png"></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">/*// Definition for a Node.class Node {public:    int val;    vector&lt;Node*&gt; children;    Node() {}    Node(int _val) {        val = _val;    }    Node(int _val, vector&lt;Node*&gt; _children) {        val = _val;        children = _children;    }};*/class Solution {public:    int maxDepth(Node* root) {        if (root == nullptr) {            return 0;        }        int res = 0;        vector&lt;Node*&gt; childs = root-&gt;children;        for (auto child : childs) {            int depth = maxDepth(child);            res = max(depth, res);        }        return res+1;    }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、周赛"><a href="#二、周赛" class="headerlink" title="二、周赛"></a>二、周赛</h1><h2 id="第一周：11-21"><a href="#第一周：11-21" class="headerlink" title="第一周：11-21"></a>第一周：11-21</h2><p>结果：两题</p><h3 id="1-两栋颜色不同且距离最远的房子"><a href="#1-两栋颜色不同且距离最远的房子" class="headerlink" title="1.两栋颜色不同且距离最远的房子"></a>1.两栋颜色不同且距离最远的房子</h3><p><img src="https://i.loli.net/2021/11/21/cbnBgAT1P2L4NjO.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> colors<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> colors<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>colors<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                                res <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> j<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-给植物浇水"><a href="#2-给植物浇水" class="headerlink" title="2.给植物浇水"></a>2.给植物浇水</h3><p><img src="https://i.loli.net/2021/11/21/e3uIwAQCBz7WVOn.png"></p><p><img src="https://i.loli.net/2021/11/21/Ni5xtzWIuLP8TsU.png"></p><p>模拟法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">wateringPlants</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> plants<span class="token punctuation">,</span> <span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> plants<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> capacity<span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> end <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> end<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//足够的水去消耗</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> plants<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>                num <span class="token operator">-=</span> plants<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>                end<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            end<span class="token operator">--</span><span class="token punctuation">;</span>            res <span class="token operator">+=</span> <span class="token punctuation">(</span>end <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//往返</span>                        num <span class="token operator">=</span> capacity<span class="token punctuation">;</span><span class="token comment">//打满水</span>            <span class="token comment">//end++;</span>        <span class="token punctuation">}</span>        <span class="token comment">//最后一次没有回去</span>        <span class="token keyword">return</span> res <span class="token operator">-</span> len<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-区间内查询数字的频率"><a href="#3-区间内查询数字的频率" class="headerlink" title="3.区间内查询数字的频率"></a>3.区间内查询数字的频率</h3><p><img src="https://i.loli.net/2021/11/21/IN6uM3Hs7QkBpLg.png"></p><p>方法一：暴力查询(超时)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">RangeFreqQuery</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrys<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RangeFreqQuery</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        arrys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arrys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arrys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Your RangeFreqQuery object will be instantiated and called as such: * RangeFreqQuery obj = new RangeFreqQuery(arr); * int param_1 = obj.query(left,right,value); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：二分查找 -&gt; 寻找左边界(超时)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">RangeFreqQuery</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrys<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RangeFreqQuery</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        arrys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            arrys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> copy <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>arrys<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>copy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmpL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmpR <span class="token operator">=</span> copy<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> targetIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>tmpL <span class="token operator">&lt;</span> tmpR<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> tmpL <span class="token operator">+</span> <span class="token punctuation">(</span>tmpR <span class="token operator">-</span> tmpL<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>copy<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                tmpR <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>copy<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                tmpR <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                tmpL <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        targetIndex <span class="token operator">=</span> tmpL<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>targetIndex <span class="token operator">&lt;</span> copy<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> copy<span class="token punctuation">[</span>targetIndex<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token operator">++</span><span class="token punctuation">;</span>            targetIndex<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Your RangeFreqQuery object will be instantiated and called as such: * RangeFreqQuery obj = new RangeFreqQuery(arr); * int param_1 = obj.query(left,right,value); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应该是query()的复制数组和排序导致的复杂度过高，应该尝试将排序仿真构造函数中。</p><p>方法三：<a href="https://leetcode-cn.com/problems/range-frequency-queries/solution/java-er-fen-by-merickbao-2-phux/">对位置进行二分</a>(太牛了)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">RangeFreqQuery</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> all <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RangeFreqQuery</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            all<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 下标是按顺序加入的，所以是有序的，所以后面可以进行二分</span>            all<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>all<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> now <span class="token operator">=</span> all<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 第一次二分找左端点下标</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> l<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">&lt;</span> left<span class="token punctuation">)</span> <span class="token punctuation">{</span>                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                r <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token comment">// 不存在这样的左端点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&gt;</span> right <span class="token operator">||</span> now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">&lt;</span> left<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 第二次二分，找右端点的下标</span>        l <span class="token operator">=</span> a<span class="token punctuation">;</span>        r <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> l<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span> <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                r <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">&gt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            b<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> b <span class="token operator">-</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * Your RangeFreqQuery object will be instantiated and called as such: * RangeFreqQuery obj = new RangeFreqQuery(arr); * int param_1 = obj.query(left,right,value); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-k-镜像数字的和"><a href="#4-k-镜像数字的和" class="headerlink" title="4.k 镜像数字的和"></a>4.<a href="https://leetcode-cn.com/problems/sum-of-k-mirror-numbers/">k 镜像数字的和</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu-vpn</title>
      <link href="/2021/11/15/ubuntu-vpn/"/>
      <url>/2021/11/15/ubuntu-vpn/</url>
      
        <content type="html"><![CDATA[<h3 id="1-普通用户切换root用户"><a href="#1-普通用户切换root用户" class="headerlink" title="1.普通用户切换root用户"></a>1.普通用户切换root用户</h3><h4 id="1-1-重新设置root密码"><a href="#1-1-重新设置root密码" class="headerlink" title="1.1 重新设置root密码"></a>1.1 重新设置root密码</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-2-进入root模式"><a href="#1-2-进入root模式" class="headerlink" title="1.2 进入root模式"></a>1.2 进入root模式</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-终端操作"><a href="#2-终端操作" class="headerlink" title="2.终端操作"></a>2.终端操作</h3><h4 id="2-1-安装Shell-Clash"><a href="#2-1-安装Shell-Clash" class="headerlink" title="2.1 安装Shell Clash"></a>2.1 安装Shell Clash</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token string">'https://cdn.jsdelivr.net/gh/juewuy/ShellClash@master'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sh</span> -c <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -kfsSl $url/install.sh<span class="token variable">)</span></span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">source</span> /etc/profile <span class="token operator">&amp;&gt;</span> /dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-2-可视化操作流程"><a href="#2-2-可视化操作流程" class="headerlink" title="2.2 可视化操作流程"></a>2.2 可视化操作流程</h4><p><img src="/2021/11/15/ubuntu-vpn/1.png"></p><p><img src="/2021/11/15/ubuntu-vpn/22222.png"></p><p><img src="/2021/11/15/ubuntu-vpn/333333-1636963797736.png"></p><p><img src="/2021/11/15/ubuntu-vpn/44.png"></p><p><img src="/2021/11/15/ubuntu-vpn/5.png"></p><h3 id="3-后续操作"><a href="#3-后续操作" class="headerlink" title="3.后续操作"></a>3.后续操作</h3><h4 id="3-1-管理代理的可视化界面"><a href="#3-1-管理代理的可视化界面" class="headerlink" title="3.1 管理代理的可视化界面"></a>3.1 管理代理的可视化界面</h4><p>请使用 <a href="http://192.168.31.61:9999/ui">http://192.168.31.61:9999/ui</a> 管理内置规则</p><p><img src="/2021/11/15/ubuntu-vpn/6.png"></p><p>选择可用节点</p><h4 id="3-2-设置本地代理"><a href="#3-2-设置本地代理" class="headerlink" title="3.2 设置本地代理"></a>3.2 设置本地代理</h4><p><img src="/2021/11/15/ubuntu-vpn/7.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>就立刻三个人分类</title>
      <link href="/2021/11/01/jiu-li-ke-san-ge-ren-fen-lei/"/>
      <url>/2021/11/01/jiu-li-ke-san-ge-ren-fen-lei/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git-Guide</title>
      <link href="/2021/11/01/git-guide/"/>
      <url>/2021/11/01/git-guide/</url>
      
        <content type="html"><![CDATA[<p><img src="/2021/11/01/git-guide/Git&amp;GitHub-1600161213521.png"></p><h1 id="Git-amp-GitHub"><a href="#Git-amp-GitHub" class="headerlink" title="Git&amp;GitHub"></a>Git&amp;GitHub</h1><h2 id="零、日常使用"><a href="#零、日常使用" class="headerlink" title="零、日常使用"></a>零、日常使用</h2><h3 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1.初始化"></a>1.初始化</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span class="token function">git</span> config --global user.name <span class="token string">"yo***ian"</span><span class="token function">git</span> config --global user.email <span class="token string">"1078***992@qq.com"</span>//多人协作的话，就建立项目级的签名//git config user.name <span class="token string">"yo***ian"</span>//git config user.email <span class="token string">"1078***992@qq.com"</span><span class="token function">git</span> config --list//如果之前设置过ssh了此处就直接调到下一模块，若是需要连接多个github,见下文ssh-keygen -t rsa -C<span class="token string">"1078***992@qq.com"</span><span class="token builtin class-name">cd</span> ~/.ssh<span class="token function">ls</span><span class="token function">cat</span> id_rsa.pub//然后在github操作添加ssh-key<span class="token builtin class-name">cd</span> ~/.ssh//如果出现：bash: cd: /home/liuyongjian/.ssh: No such <span class="token function">file</span> or directory//说明没有SSH Key,需要生成//使用命令：ssh-keygen -t rsa -C<span class="token string">"107***2992@qq.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/11/01/git-guide/2020031365463717.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//查看已经生成了 id_rsa 和 id_rsa.pub文件<span class="token builtin class-name">cd</span> ~/.ssh<span class="token function">ls</span>//获取SSH Key<span class="token function">cat</span> id_rsa.pub  //拷贝秘钥 ssh-rsa开头复制ssh-rsa至1078***992@qq.com//匹配githubsetttings-<span class="token operator">&gt;</span>SSHandGPGkeys-<span class="token operator">&gt;</span>newsshkey<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有时候会出现ssh不能用，如果赶得急就换HTTP:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote remove origin//移除ssh库<span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/2997215859/ROI.git<span class="token function">git</span> push origin mqtt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/11/01/git-guide/F79446CC3731059E68734B68D4C8A4F4.png"></p><h3 id="2-创建远程库"><a href="#2-创建远程库" class="headerlink" title="2.创建远程库"></a>2.创建远程库</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote -v 查看当前所拥有远程地址别名<span class="token function">git</span> remote <span class="token function">add</span> <span class="token punctuation">[</span>别名<span class="token punctuation">]</span> <span class="token punctuation">[</span>远程地址<span class="token punctuation">]</span>//创建分支: <span class="token function">git</span> branch <span class="token punctuation">[</span>分支名<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本地创建远程的新分支并push上去：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout -b my-test  //在当前分支下创建my-test的本地分支分支<span class="token function">git</span> push origin my-test  //将my-test分支推送到远程<span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/my-test //将本地分支my-test关联到远程分支my-test上   <span class="token function">git</span> branch -a //查看远程分支 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此时远程分支my-test已经创建好了，并且本地的分支已经关联到远程分支上<br>本地push代码以后会push到关联的远程分支上。</p><h3 id="3-提交"><a href="#3-提交" class="headerlink" title="3.提交"></a>3.提交</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> status<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> checkout <span class="token punctuation">[</span>要push的分支名<span class="token punctuation">]</span><span class="token function">git</span> commit -m <span class="token string">"本次提交注释"</span><span class="token function">git</span> push <span class="token punctuation">[</span>远程库<span class="token punctuation">]</span> <span class="token punctuation">[</span>远程分支<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提交可能会出现错误：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh: connect to <span class="token function">host</span> github.com port <span class="token number">22</span>: Connection timed out fatal: Could not <span class="token builtin class-name">read</span> from remote repository.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以参考以下两个链接进行增加config文件：<a href="https://gist.github.com/Tamal/1cc77f88ef3e900aeae65f0e5e504794">链接1</a> <a href="https://blog.csdn.net/MBuger/article/details/70226712">链接2</a></p><p>有时候会出现头指针分离，push不到远程去:</p><p><img src="/2021/11/01/git-guide/image-20210513202300745.png"></p><p>其实可以直接像下面这样提交，就不会使用上面的步骤(<strong>会丢失最新修改</strong>):</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> status<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> checkout <span class="token punctuation">[</span>要push的分支名<span class="token punctuation">]</span><span class="token function">git</span> commit -m <span class="token string">"本次提交注释"</span><span class="token function">git</span> push <span class="token punctuation">[</span>远程库<span class="token punctuation">]</span> <span class="token punctuation">[</span>远程分支<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-拉取"><a href="#4-拉取" class="headerlink" title="4. 拉取:"></a>4. 拉取:</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token punctuation">[</span>目标分支<span class="token punctuation">]</span><span class="token function">git</span> checkout -f <span class="token punctuation">[</span>当前分支<span class="token punctuation">]</span><span class="token function">git</span> pull <span class="token punctuation">[</span>远程库<span class="token punctuation">]</span> <span class="token punctuation">[</span>远程分支<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>本地pull不了是使用git checkout -f [当前分支]</p><p>本地push不了可能是因为网页端修改过内容了，需要拉去远端数据到本地然后merge之后再push同步：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> fetch origin //获取远程更新<span class="token function">git</span> merge origin/master //把更新的内容合并到本地分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://blog.csdn.net/qq_19674263/article/details/105277244">有关git的一些常用命令</a></p><h3 id="5-同一台电脑多个密钥绑定多个guthub仓库"><a href="#5-同一台电脑多个密钥绑定多个guthub仓库" class="headerlink" title="5.同一台电脑多个密钥绑定多个guthub仓库:"></a>5.同一台电脑多个密钥绑定多个guthub仓库:</h3><p><a href="https://blog.csdn.net/weixin_42500714/article/details/101552802">主</a></p><p><a href="https://www.cnblogs.com/zhengyan/p/10728527.html">次</a></p><p>主要步骤:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//生成密钥对<span class="token punctuation">(</span>指定密钥对名称<span class="token punctuation">)</span>//之前已经存在的就不用这句话了//ssh-keygen -t rsa -C<span class="token string">"1078302992@qq.com"</span> -f ~/.ssh/id_rsa_onessh-keygen -t rsa -C<span class="token string">"1254342191@qq.com"</span> -f ~/.ssh/id_rsa_two<span class="token builtin class-name">cd</span> ~/.ssh<span class="token function">ls</span>id_rsa id_rsa.pub id_rsa.two id_rsa_two.pub known_hosts<span class="token function">cat</span> id_rsa_two.pub然后在github操作添加ssh-key//配置密钥对配置文件<span class="token function">touch</span> configgedit config<span class="token comment"># one</span>Host github.comHostName github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsa<span class="token comment"># two</span>Host github.comHostName github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsa_two<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-windows的git-bash"><a href="#6-windows的git-bash" class="headerlink" title="6.windows的git bash"></a>6.windows的git bash</h3><p>1.六、10的SSH配置</p><p>2.进入要上传的文件夹中</p><p>3.可以参照四</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span class="token function">git</span> config user.name yongjian<span class="token function">git</span> config user.email <span class="token number">1078302992</span>@qq.com<span class="token function">git</span> remote <span class="token function">add</span> <span class="token punctuation">[</span>别名<span class="token punctuation">]</span> <span class="token punctuation">[</span>远程库<span class="token punctuation">]</span><span class="token function">git</span> remote -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.提交</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> status<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m <span class="token string">"本次提交注释"</span><span class="token function">git</span> push <span class="token punctuation">[</span>远程库<span class="token punctuation">]</span> <span class="token punctuation">[</span>远程分支<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>//创建分支: git branch [分支名]</p><p>5.拉取:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token punctuation">[</span>目标分支<span class="token punctuation">]</span><span class="token function">git</span> checkout -f <span class="token punctuation">[</span>当前分支<span class="token punctuation">]</span><span class="token function">git</span> pull <span class="token punctuation">[</span>远程库<span class="token punctuation">]</span> <span class="token punctuation">[</span>远程分支<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="一、版本控制工具应该具备的功能"><a href="#一、版本控制工具应该具备的功能" class="headerlink" title="一、版本控制工具应该具备的功能"></a>一、版本控制工具应该具备的功能</h2><h3 id="1-协同修改"><a href="#1-协同修改" class="headerlink" title="1.协同修改"></a>1.协同修改</h3><p>多人并行不悖的修改服务器端的同一个文件。</p><h3 id="2-数据备份"><a href="#2-数据备份" class="headerlink" title="2.数据备份"></a>2.数据备份</h3><p>不仅保存目录和文件的当前状态，还能够保存每一个提交过的历史状态。</p><h3 id="3-版本管理"><a href="#3-版本管理" class="headerlink" title="3.版本管理"></a>3.版本管理</h3><p>在保存每一个版本的文件信息的时候要做到不保存重复数据，以节约存储空间，提高运行效率。这方便SVN采用的是增量式管理的方式，而Git采取了文件系统快照的方式。</p><h3 id="4-权限控制"><a href="#4-权限控制" class="headerlink" title="4.权限控制"></a>4.权限控制</h3><p>(1)对团队参与开发的人员进行权限控制</p><p>(2)对团队外开发者贡献的代码进行审核——Git独有</p><h3 id="5-历史记录"><a href="#5-历史记录" class="headerlink" title="5.历史记录"></a>5.历史记录</h3><p>(1)查看修改人、修改时间、修改内容、日志信息</p><p>(2)将本地文件恢复到某一个历史状态</p><h3 id="6-分支管理"><a href="#6-分支管理" class="headerlink" title="6.分支管理"></a>6.分支管理</h3><p>允许开发团队在工作过程中多条生产线同时推进任务，进一步提高效率</p><h2 id="二、版本控制简介"><a href="#二、版本控制简介" class="headerlink" title="二、版本控制简介"></a>二、版本控制简介</h2><h3 id="1-版本控制"><a href="#1-版本控制" class="headerlink" title="1.版本控制"></a>1.版本控制</h3><p>工程设计领域中使用版本控制管理工程蓝图的设计过程。在IT开发过程中也可以使用版本控制思想管理代码的版本迭代。</p><h3 id="2-版本控制工具"><a href="#2-版本控制工具" class="headerlink" title="2.版本控制工具"></a>2.版本控制工具</h3><p>思想:版本控制</p><p>实现:版本控制工具</p><h4 id="1-集中式版本控制工具"><a href="#1-集中式版本控制工具" class="headerlink" title="(1)集中式版本控制工具"></a>(1)集中式版本控制工具</h4><p>CVS、SVN、VSS…..</p><p><img src="/2021/11/01/git-guide/image-20200911150019132.png"></p><p>单点故障:服务器一旦宕机，所有资料就没了，客户端上只会存储当时保存的状态</p><h4 id="2-分布式版本控制工具"><a href="#2-分布式版本控制工具" class="headerlink" title="(2)分布式版本控制工具"></a>(2)分布式版本控制工具</h4><p>Git、Mercurial、Bazaar、Darcs………</p><p><img src="/2021/11/01/git-guide/image-20200911150252557.png"></p><p>本地就有完整的历史进行版本控制</p><h2 id="三、Git简介"><a href="#三、Git简介" class="headerlink" title="三、Git简介"></a>三、Git简介</h2><h3 id="1-Git简史"><a href="#1-Git简史" class="headerlink" title="1.Git简史"></a>1.Git简史</h3><p><img src="/2021/11/01/git-guide/image-20200911150436239.png"></p><h3 id="2-Git官网和Logo"><a href="#2-Git官网和Logo" class="headerlink" title="2.Git官网和Logo"></a>2.Git官网和Logo</h3><p><a href="https://git-scm.com/">官网地址</a></p><p>Logo:</p><p><img src="/2021/11/01/git-guide/u=924384885,4203827437&amp;fm=26&amp;gp=0.jpg"></p><h3 id="3-Git的优势"><a href="#3-Git的优势" class="headerlink" title="3.Git的优势"></a>3.Git的优势</h3><p>(1)大部分操作在本地完成，不需要联网</p><p>(2)完整性保证</p><p>(3)尽可能添加数据而不是删除或修改数据</p><p>(4)分支操作非常快捷流畅</p><p>(5)与Linux命令全面兼容</p><h3 id="4-Git的安装"><a href="#4-Git的安装" class="headerlink" title="4.Git的安装"></a>4.Git的安装</h3><p>见pdf版or百度</p><h3 id="5-Git结构"><a href="#5-Git结构" class="headerlink" title="5.Git结构"></a>5.Git结构</h3><p><img src="/2021/11/01/git-guide/image-20200911151313551.png"></p><h3 id="6-Git和代码托管中心"><a href="#6-Git和代码托管中心" class="headerlink" title="6.Git和代码托管中心"></a>6.Git和代码托管中心</h3><p>代码托管中心的任务:维护远程库</p><h4 id="1-局域网环境下"><a href="#1-局域网环境下" class="headerlink" title="(1)局域网环境下"></a>(1)局域网环境下</h4><p>GitLab服务器</p><h4 id="2-外网环境下"><a href="#2-外网环境下" class="headerlink" title="(2)外网环境下"></a>(2)外网环境下</h4><p>GitHub</p><p>码云</p><h3 id="7-本地库和远程库"><a href="#7-本地库和远程库" class="headerlink" title="7.本地库和远程库"></a>7.本地库和远程库</h3><h4 id="1-团队内部协作"><a href="#1-团队内部协作" class="headerlink" title="(1)团队内部协作"></a>(1)团队内部协作</h4><p><img src="/2021/11/01/git-guide/image-20200911151628313.png"></p><p>1-&gt;push</p><p>2-&gt;clone</p><p>2修改完-&gt;push</p><p>1再push</p><h4 id="2-跨团队协作"><a href="#2-跨团队协作" class="headerlink" title="(2)跨团队协作"></a>(2)跨团队协作</h4><p><img src="/2021/11/01/git-guide/image-20200911151815850.png"></p><h2 id="四-Git命令行操作"><a href="#四-Git命令行操作" class="headerlink" title="四.Git命令行操作"></a>四.Git命令行操作</h2><h3 id="1-本地库初始化"><a href="#1-本地库初始化" class="headerlink" title="1.本地库初始化"></a>1.本地库初始化</h3><p>就是建立本地仓库</p><p>(1)命令</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>(2)效果</p><p><img src="/2021/11/01/git-guide/image-20200911152156818.png"></p><p><img src="/2021/11/01/git-guide/image-20200911152216074.png"></p><p>(3)注意</p><ul><li>.git目录中存放的是本地库相关的子目录和文件，不要删除，也不要胡乱修改</li></ul><h3 id="2-设置签名"><a href="#2-设置签名" class="headerlink" title="2.设置签名"></a>2.设置签名</h3><p>(1)形式</p><pre><code>* 用户名: tom* Email地址:goodMoring@atguigu.com</code></pre><p>(2)作用</p><ul><li>区分不同开发人员的身份</li></ul><p>(3)辨析</p><ul><li>这里设置的签名和登录远程库(代码托管中心)的账号、密码没有任何关系</li></ul><p>(4) 命令</p><ul><li>项目级别/仓库级别:仅在当前本地库范围内有效</li></ul><blockquote><p>git config user.name tom_pro</p><p>git config user.email <a href="mailto:goodMornig_pro@atguigu.com">goodMornig_pro@atguigu.com</a></p><p>信息保存的位置:  ./.git/config文件</p></blockquote><ul><li>查看git配置文件内容的两种方法:</li></ul><p><img src="/2021/11/01/git-guide/%E6%89%B9%E6%B3%A8%202020-09-11%20102007.png"></p><ul><li>系统用户级别:登录当前操作系统的用户范围</li></ul><blockquote><p>git config –global user.name tom_glb</p><p>git config –global <a href="mailto:goodMorning_pro@atguigu.com">goodMorning_pro@atguigu.com</a></p><p>信息保存位置:  ~/.gitconfig 文件</p></blockquote><p><img src="/2021/11/01/git-guide/%E6%89%B9%E6%B3%A8%202020-09-11%20102814.png"></p><ul><li>级别优先级</li></ul><blockquote><p>就近原则:项目级别优先于系统用户级别，二者都有时采用 项目级别的签名</p><p>如果只有系统用户级别的签名，就以系统用户的签名为准</p><p>二者都没有不允许</p></blockquote><h3 id="3-基本操作"><a href="#3-基本操作" class="headerlink" title="3.基本操作"></a>3.基本操作</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git">git status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看工作区、暂存区状态</p><p><img src="/2021/11/01/git-guide/%E6%89%B9%E6%B3%A8%202020-09-11%20103235.png"></p><p>第一行:在主分支上<br>第二行:没有任何已经提交的内容=本地库里面没有东西<br>第三行:没有什么可提交的=暂存区没有东西</p><p>补充:vim的一些简单命令:</p><p><img src="/2021/11/01/git-guide/%E6%89%B9%E6%B3%A8%202020-09-11%20103846.png"></p><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"><span class="token number">1</span><span class="token operator">.</span>一般模式下<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">set</span> <span class="token keyword">nu</span> 显示行号<span class="token number">2</span><span class="token operator">.</span>i 进入插入模式 esc退出插入模式到一般模式<span class="token number">3</span><span class="token operator">.</span>提交的话就是退到一般模式，然后 <span class="token punctuation">:</span><span class="token keyword">wq</span><span class="token operator">+</span>enter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2021/11/01/git-guide/%E6%89%B9%E6%B3%A8%202020-09-11%20104135.png"></p><p>第三行说的是一个未追踪的文件，建议使用git add命令提交到暂存区<br>第四行说的是暂存区没有东西但是有未追踪的文件可以提交<br>(暂存区的内容是可以commit到本地库的)</p><h4 id="2-添加"><a href="#2-添加" class="headerlink" title="(2)添加"></a>(2)添加</h4><pre class="line-numbers language-git" data-language="git"><code class="language-git">git add [filename]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将工作区的”新建/修改”添加到暂存区</p><p>将当前文件夹中的所有文件都添加到暂存区:</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git add .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从暂存区撤回到工作区:</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git rm --cached 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/01/git-guide/%E6%89%B9%E6%B3%A8%202020-09-11%20104806.png"></p><p><img src="/2021/11/01/git-guide/%E6%89%B9%E6%B3%A8%202020-09-11%20105031.png"></p><h4 id="3-提交-1"><a href="#3-提交-1" class="headerlink" title="(3)提交"></a>(3)提交</h4><pre class="line-numbers language-git" data-language="git"><code class="language-git">git commit -m <span class="token string">"commit message"</span> [filename]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将暂存区的内容提交到本地库</p><p>上面这句话就比git commit [filename],然后自动进入vim编辑器编写备注要方便</p><p><img src="/2021/11/01/git-guide/%E6%89%B9%E6%B3%A8%202020-09-11%20110411.png"></p><p><img src="/2021/11/01/git-guide/%E6%89%B9%E6%B3%A8%202020-09-11%20110546.png"></p><p><img src="/2021/11/01/git-guide/%E6%89%B9%E6%B3%A8%202020-09-11%20110749.png"></p><p><img src="/2021/11/01/git-guide/%E6%89%B9%E6%B3%A8%202020-09-11%20111109.png"></p><h4 id="4-查看历史记录"><a href="#4-查看历史记录" class="headerlink" title="(4)查看历史记录"></a>(4)查看历史记录</h4><pre class="line-numbers language-git" data-language="git"><code class="language-git">git log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>多屏显示控制方式:</p><pre><code>空格向下翻页b向上翻页q退出</code></pre><pre class="line-numbers language-git" data-language="git"><code class="language-git">git log --pretty=oneline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/01/git-guide/image-20200912160727229.png"></p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git log --oneline<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/01/git-guide/image-20200912160807150.png"></p><p>只显示一部分hash值</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git reflog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/01/git-guide/image-20200912160914878.png"></p><p>HEAD@{移动到当前版本需要多少步}</p><h4 id="5-前进后退"><a href="#5-前进后退" class="headerlink" title="(5)前进后退"></a>(5)前进后退</h4><ul><li>本质</li></ul><p><img src="/2021/11/01/git-guide/image-20200912161105905.png"></p><ul><li>基于索引值操作(推荐)</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset --hard <span class="token punctuation">[</span>局部索引值<span class="token punctuation">]</span>例:git reset --hard 42e7e84<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>使用^符号:只能后退</li></ul><pre class="line-numbers language-git" data-language="git"><code class="language-git">git reset --hard HEAD^<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意:一个^表示后退一步，n个表示后退n步</p><ul><li>使用~符号:只能后退</li></ul><pre class="line-numbers language-git" data-language="git"><code class="language-git">git reset --hard HEAD~n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意:表示后退n步</p><h4 id="6-reset命令的三个参数对比"><a href="#6-reset命令的三个参数对比" class="headerlink" title="(6)reset命令的三个参数对比"></a>(6)reset命令的三个参数对比</h4><p>文件状态:红色是在工作区(untracked)，绿色是在暂存区(staged)</p><p><img src="/2021/11/01/git-guide/image-20201223144218820.png"></p><h5 id="a-–soft参数"><a href="#a-–soft参数" class="headerlink" title="a. –soft参数"></a>a. –soft参数</h5><p>仅仅在本地库移动HEAD指针</p><p><img src="/2021/11/01/git-guide/image-20200912173243073.png"></p><p>本地库是指向9a9ebe0这个版本，但是本地的文件(工作区)还是6325c55时的内容</p><p><img src="/2021/11/01/git-guide/image-20200912173406255.png"></p><p>暂存区状态:</p><p><img src="/2021/11/01/git-guide/image-20200912173452805.png"></p><p>此时是绿色，也就是有文件有变化,其实是这样的:<br><img src="/2021/11/01/git-guide/image-20200912173552496.png"></p><p>soft命令后，本地库指针后退了，显得暂存区工作区往前走了一个，其实是本地库后退了一个,所以回显示绿色，需要从暂存区提交到本地库的状态</p><p>此时文件处于staged的状态，也就是暂存区的内容还没有commit到本地库，也就是本地库的指针已经调到指定的版本指针(已经commit过的状态)，但是已经存在的变更在暂存区(staged)和工作区(modified)依旧存在。</p><h5 id="b-–mixed参数"><a href="#b-–mixed参数" class="headerlink" title="b. –mixed参数"></a>b. –mixed参数</h5><blockquote><p>在本地库移动HEAD指针</p><p>重置暂存区</p></blockquote><p><img src="/2021/11/01/git-guide/image-20200912173757209.png"></p><p>本地还是没有变。而且暂存区状态变成红色了:</p><p><img src="/2021/11/01/git-guide/image-20200912173921452.png"></p><p>!(Git-Guide/image-20200912172729376.png)</p><p>mixed命令后，本地库和暂存区指针都后退了，显得工作区往前走了一个，其实是本地库和暂存区后退了一个:</p><p>此时文件处于modified的状态，也就是工作区的内容还没有add到暂存区,也就是本地库的指针已经调到指定的版本指针(已经commit过的状态)，暂存区也已经跟随指针回退到相应的版本，但是已经存在的变更在工作区(modified)依旧存在</p><h5 id="c-–hard参数"><a href="#c-–hard参数" class="headerlink" title="c.  –hard参数"></a>c.  –hard参数</h5><blockquote><p>在本地库移动HEAD指针</p><p>重置暂存区</p><p>重置工作区</p></blockquote><p>也就是说，<br>–hard是不保留所有更改，三个区的文件都切到上一条commit(本地库)的状态</p><p>例如你在上次 <strong>commit</strong> 之后又对文件做了一些改动：把修改后的<strong>ganmes.txt</strong>文件<strong>add</strong>到<strong>暂存区</strong>，修改后的<strong>shopping list.txt</strong>保留在工作区</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/01/git-guide/4428238-1c22b16e14586320.png"></p><p>最初状态</p><p> 然后，执行了<strong>reset</strong>并附上了**–hard**参数：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> reset --hard HEAD^<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你的 <strong>HEAD *<em>和当前*</em> branch</strong> 切到上一条<strong>commit</strong> 的同时，你工作目录里的新改动和已经add到stage区的新改动也一起全都消失了：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/01/git-guide/20211111111827.png"></p><p> 可以看到，在 <strong>reset –hard</strong> 后，所有的改动都被擦掉了。</p><h4 id="7-删除文件并找回"><a href="#7-删除文件并找回" class="headerlink" title="(7) 删除文件并找回"></a>(7) 删除文件并找回</h4><ul><li>前提: 删除前，文件存在时的状态提交到了本地库</li><li>操作:</li></ul><pre class="line-numbers language-git" data-language="git"><code class="language-git">git reset --hard [指针位置]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>删除操作已经提交到本地库:指针位置指向历史记录</p><p>删除操作尚未提交到本地库:指针位置使用HEAD</p></blockquote><p><img src="/2021/11/01/git-guide/image-20200912185538491.png"></p><p><img src="/2021/11/01/git-guide/image-20200912185601032.png"></p><p>or</p><p><img src="/2021/11/01/git-guide/image-20200912185844115.png"></p><h4 id="8-比较文件差异"><a href="#8-比较文件差异" class="headerlink" title="(8)比较文件差异"></a>(8)比较文件差异</h4><h5 id="a-git-diff-文件名"><a href="#a-git-diff-文件名" class="headerlink" title="a. git diff [文件名]"></a>a. git diff [文件名]</h5><p>将工作区中的文件和暂存区进行比较</p><p><img src="/2021/11/01/git-guide/image-20200912190312828.png"></p><h5 id="b-git-diff-本地库中历史版本-文件名"><a href="#b-git-diff-本地库中历史版本-文件名" class="headerlink" title="b.  git diff [本地库中历史版本] [文件名]"></a>b.  git diff [本地库中历史版本] [文件名]</h5><p>将工作区中的文件和本地库历史记录比较</p><p><img src="/2021/11/01/git-guide/image-20200912190349374.png"></p><h5 id="c-不带文件名比较多个文件"><a href="#c-不带文件名比较多个文件" class="headerlink" title="c.不带文件名比较多个文件"></a>c.不带文件名比较多个文件</h5><p><img src="/2021/11/01/git-guide/image-20200912190542552.png"></p><h3 id="4-分支管理"><a href="#4-分支管理" class="headerlink" title="4.分支管理"></a>4.分支管理</h3><h4 id="1-什么是分支？"><a href="#1-什么是分支？" class="headerlink" title="(1)什么是分支？"></a>(1)什么是分支？</h4><p>在版本控制过程中，使用多条线同时推进多个任务</p><p><img src="/2021/11/01/git-guide/image-20200912190629652.png"></p><h4 id="2-分支的好处"><a href="#2-分支的好处" class="headerlink" title="(2)分支的好处?"></a>(2)分支的好处?</h4><ul><li>同时并行推进多个功能开发，提高开发效率</li><li>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可</li></ul><h4 id="3-分支操作"><a href="#3-分支操作" class="headerlink" title="(3)分支操作"></a>(3)分支操作</h4><p>要将本地代码上传到远程新的分支上去:<br>1.远程新建分支</p><p>2.本地新建分支</p><p>git branch [分支名]</p><p>3.本地切换分支</p><p>git checkout [分支名]</p><p>4.push</p><p>git push [远程库] [分支名]</p><h5 id="a-创建分支"><a href="#a-创建分支" class="headerlink" title="a.  创建分支"></a>a.  创建分支</h5><pre class="line-numbers language-git" data-language="git"><code class="language-git">git branch [分支名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="b-查看分支"><a href="#b-查看分支" class="headerlink" title="b.  查看分支"></a>b.  查看分支</h5><pre class="line-numbers language-git" data-language="git"><code class="language-git">git branch -vgit branch -a //查看本地和远程所有分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="c-切换分支"><a href="#c-切换分支" class="headerlink" title="c.  切换分支"></a>c.  切换分支</h5><pre class="line-numbers language-git" data-language="git"><code class="language-git">git checkout [分支名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2021/11/01/git-guide/image-20200912191110968.png"></p><h5 id="d-合并分支"><a href="#d-合并分支" class="headerlink" title="d.  合并分支"></a>d.  合并分支</h5><ul><li>第一步:切换到接受参数的分支(被合并，增加新内容)上</li></ul><pre class="line-numbers language-git" data-language="git"><code class="language-git">git checkout [被合并分支名](master)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>第二步:执行merge命令</li></ul><pre class="line-numbers language-git" data-language="git"><code class="language-git">git merge [有新内容分支名](hot-fix)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="e-解决冲突"><a href="#e-解决冲突" class="headerlink" title="e.  解决冲突"></a>e.  解决冲突</h5><ul><li>冲突的表现</li></ul><p><img src="/2021/11/01/git-guide/image-20200912191744984.png"></p><ul><li>冲突的解决</li></ul><blockquote><p>第一步:编辑文件，删除特殊符号</p><p>第二步:把文件修改到满意的程度，保存退出</p><p>第三步:git add [文件名]</p><p>第四步;git commit -m “日志信息”</p><ul><li>注意:此时的commit一定不能带具体文件名</li></ul></blockquote><h3 id="5-文件的状态变化"><a href="#5-文件的状态变化" class="headerlink" title="5.文件的状态变化"></a>5.文件的状态变化</h3><p><img src="/2021/11/01/git-guide/image-20201223143525420.png"></p><p>新建的文件处于untracked状态， git add之后变成staged状态，再git commit之后变成unmodified状态。此时修改之后就变成Modified状态</p><p>文件状态:红色是在工作区(untracked)，绿色是在暂存区(staged)</p><h2 id="五-Git的基本原理"><a href="#五-Git的基本原理" class="headerlink" title="五.Git的基本原理"></a>五.Git的基本原理</h2><h3 id="1-哈希"><a href="#1-哈希" class="headerlink" title="1.哈希"></a>1.哈希</h3><p><img src="/2021/11/01/git-guide/image-20200912192023278.png"></p><p>哈希是一个系列的加密算法，各个不同的哈希算法虽然加密强度不同，但是有以下几个共同点:</p><ul><li>不管输入数据的数据量有多大，输入同一个哈希算法，得到的加密结果长度固定</li><li>哈希算法确定，输入数据确定，输出数据能够保证不变</li><li>哈希算法确定，输入数据有变化，输出数据一定有变化，而且通常变化很大</li><li>哈希算法不可逆</li></ul><p>Git底层采用的是SHA-1算法</p><p>哈希算法可以被用来验证文件。原理如下图所示:</p><p><img src="/2021/11/01/git-guide/image-20200912141806018.png"></p><p>Git就是靠这种机制来从根本上保证数据完整性的</p><h3 id="2-Git保存版本的机制"><a href="#2-Git保存版本的机制" class="headerlink" title="2.Git保存版本的机制"></a>2.Git保存版本的机制</h3><h4 id="1-集中式版本控制工具的文件管理机制"><a href="#1-集中式版本控制工具的文件管理机制" class="headerlink" title="(1)集中式版本控制工具的文件管理机制"></a>(1)集中式版本控制工具的文件管理机制</h4><p>以文件变更列表的方式存储信息。这类系统将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。</p><p><img src="/2021/11/01/git-guide/image-20200912142112021.png"></p><h4 id="2-Git的文件管理机制"><a href="#2-Git的文件管理机制" class="headerlink" title="(2)Git的文件管理机制"></a>(2)Git的文件管理机制</h4><p>Git把数据看作是小型文件系统的一组快照。每次提交更新时Git都会对当前的全部文件制作一个快照并保存这个快照的索引。为了高效，如果文件没有被修改，Git不再重新存储该文件，而是只保留一个链接指向之前存储的文件。所以Git的工作方式可以称之为快照流。</p><p><img src="/2021/11/01/git-guide/image-20200912142347996.png"></p><h4 id="3-Git文件管理机制细节"><a href="#3-Git文件管理机制细节" class="headerlink" title="(3)Git文件管理机制细节"></a>(3)Git文件管理机制细节</h4><h5 id="a-Git的”提交对象”"><a href="#a-Git的”提交对象”" class="headerlink" title="a.Git的”提交对象”"></a>a.Git的”提交对象”</h5><p><img src="/2021/11/01/git-guide/image-20200912142533177.png"></p><h5 id="b-提交对象及其父对象形成的链条"><a href="#b-提交对象及其父对象形成的链条" class="headerlink" title="b.提交对象及其父对象形成的链条"></a>b.提交对象及其父对象形成的链条</h5><p><img src="/2021/11/01/git-guide/image-20200912142518562.png"></p><h3 id="3-Git分支管理机制"><a href="#3-Git分支管理机制" class="headerlink" title="3.Git分支管理机制"></a>3.Git分支管理机制</h3><h4 id="1-分支的创建"><a href="#1-分支的创建" class="headerlink" title="(1)分支的创建"></a>(1)分支的创建</h4><p><img src="/2021/11/01/git-guide/image-20200912142714184.png"></p><h4 id="2-分支的切换"><a href="#2-分支的切换" class="headerlink" title="(2)分支的切换"></a>(2)分支的切换</h4><p><img src="/2021/11/01/git-guide/image-20200912142729357.png"></p><p><img src="/2021/11/01/git-guide/image-20200912142752282.png"></p><p><img src="/2021/11/01/git-guide/image-20200912142816815.png"></p><p>核心就是不动文件，动指针</p><h2 id="六-Github"><a href="#六-Github" class="headerlink" title="六.Github"></a>六.Github</h2><h3 id="1-账号信息"><a href="#1-账号信息" class="headerlink" title="1.账号信息"></a>1.账号信息</h3><p>GitHub首页就是注册页面:<a href="https://github.com/">https://github.com/</a></p><p><img src="/2021/11/01/git-guide/image-20200912143014675.png"></p><h3 id="2-创建远程库-1"><a href="#2-创建远程库-1" class="headerlink" title="2.创建远程库"></a>2.创建远程库</h3><p><img src="/2021/11/01/git-guide/image-20200912143059370.png"></p><p><img src="/2021/11/01/git-guide/image-20200912143119382.png"></p><h3 id="3-创建远程库地址别名"><a href="#3-创建远程库地址别名" class="headerlink" title="3.创建远程库地址别名"></a>3.创建远程库地址别名</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git">git remote -v 查看当前所拥有远程地址别名git remote add [别名] [远程地址]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/11/01/git-guide/image-20200912200836708.png"></p><h3 id="4-推送"><a href="#4-推送" class="headerlink" title="4.推送"></a>4.推送</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git">git push [别名] [分支名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-克隆"><a href="#5-克隆" class="headerlink" title="5.克隆"></a>5.克隆</h3><h4 id="1-命令"><a href="#1-命令" class="headerlink" title="(1)命令"></a>(1)命令</h4><pre class="line-numbers language-git" data-language="git"><code class="language-git">git clone [远程地址]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-效果"><a href="#2-效果" class="headerlink" title="(2)效果"></a>(2)效果</h4><ul><li>完整的把远程库下载到本地</li><li>创建origin远程地址别名</li><li>初始化本地库</li></ul><h3 id="6-团队成员邀请"><a href="#6-团队成员邀请" class="headerlink" title="6.团队成员邀请"></a>6.团队成员邀请</h3><p><img src="/2021/11/01/git-guide/image-20200912143559118.png"></p><p>“岳不群”其他方式把邀请链接发送给”令狐冲”，”令狐冲”登录自己的GitHub账号，访问邀请链接</p><p><img src="/2021/11/01/git-guide/image-20200912143710981.png"></p><h3 id="7-拉取"><a href="#7-拉取" class="headerlink" title="7.拉取"></a>7.拉取</h3><ul><li>pull = fetch+merge</li><li>git fetch [远程库地址别名] [远程分支名]</li><li>git merge [远程库地址别名/远程分支名]</li><li>git pull [远程库地址别名] [远程分支名]</li></ul><h3 id="8-解决冲突"><a href="#8-解决冲突" class="headerlink" title="8.解决冲突"></a>8.解决冲突</h3><h4 id="1-要点"><a href="#1-要点" class="headerlink" title="(1)要点"></a>(1)要点</h4><ul><li>如果不是基于GitHub远程库的最新版所做的修改，不能推送，必须先拉取。</li><li>拉取下来后如果进入冲突状态，则按照”分支冲突解决”操作解决即可。</li></ul><h4 id="2-类比"><a href="#2-类比" class="headerlink" title="(2)类比"></a>(2)类比</h4><ul><li>债权人:老王</li><li>债务人:小刘</li></ul><ul><li>老王说:10天后归还。小刘接受，双方达成一致。</li><li>老王媳妇说:5天后归还。小刘不能接受。老王媳妇需要找老王确认后再执行</li></ul><h3 id="9-跨团队协作"><a href="#9-跨团队协作" class="headerlink" title="9.跨团队协作"></a>9.跨团队协作</h3><h4 id="1-Fork"><a href="#1-Fork" class="headerlink" title="(1)Fork"></a>(1)Fork</h4><p><img src="/2021/11/01/git-guide/image-20200912144741225.png"></p><p><img src="/2021/11/01/git-guide/image-20200912144804136.png"></p><h4 id="2-本地修改，然后推送到远程"><a href="#2-本地修改，然后推送到远程" class="headerlink" title="(2)本地修改，然后推送到远程"></a>(2)本地修改，然后推送到远程</h4><h4 id="3-Pull-Request"><a href="#3-Pull-Request" class="headerlink" title="(3)Pull Request"></a>(3)Pull Request</h4><p><img src="/2021/11/01/git-guide/image-20200912144826493.png"></p><p><img src="/2021/11/01/git-guide/image-20200912144846976.png"></p><p><img src="/2021/11/01/git-guide/image-20200912144903364.png"></p><h4 id="4-对话"><a href="#4-对话" class="headerlink" title="(4)对话"></a>(4)对话</h4><p><img src="/2021/11/01/git-guide/image-20200912144922694.png"></p><p><img src="/2021/11/01/git-guide/image-20200912144940980.png"></p><h4 id="5-审核代码"><a href="#5-审核代码" class="headerlink" title="(5)审核代码"></a>(5)审核代码</h4><p><img src="/2021/11/01/git-guide/image-20200912144956936.png"></p><h4 id="6-合并代码"><a href="#6-合并代码" class="headerlink" title="(6)合并代码"></a>(6)合并代码</h4><p><img src="/2021/11/01/git-guide/image-20200912145027361.png"></p><p><img src="/2021/11/01/git-guide/image-20200912145042178.png"></p><h4 id="7-将远程库修改拉取到本地"><a href="#7-将远程库修改拉取到本地" class="headerlink" title="(7)将远程库修改拉取到本地"></a>(7)将远程库修改拉取到本地</h4><h3 id="10-SSH登录"><a href="#10-SSH登录" class="headerlink" title="10.SSH登录"></a>10.SSH登录</h3><h4 id="1-进入当前用户的家目录"><a href="#1-进入当前用户的家目录" class="headerlink" title="(1)进入当前用户的家目录"></a>(1)进入当前用户的家目录</h4><pre class="line-numbers language-git" data-language="git"><code class="language-git">cd ~<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-删除-ssh目录"><a href="#2-删除-ssh目录" class="headerlink" title="(2)删除.ssh目录"></a>(2)删除.ssh目录</h4><pre class="line-numbers language-git" data-language="git"><code class="language-git">rm -rvf .ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-运行命令生成-ssh密钥目录"><a href="#3-运行命令生成-ssh密钥目录" class="headerlink" title="(3)运行命令生成.ssh密钥目录"></a>(3)运行命令生成.ssh密钥目录</h4><pre class="line-numbers language-git" data-language="git"><code class="language-git">ssh-keygen -t rsa -C atguigu2018ybuq@aliyun.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-进入-ssh目录查看文件列表给i他"><a href="#4-进入-ssh目录查看文件列表给i他" class="headerlink" title="(4)进入.ssh目录查看文件列表给i他"></a>(4)进入.ssh目录查看文件列表给i他</h4><pre class="line-numbers language-git" data-language="git"><code class="language-git">cd .sshls -lF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="5-查看id-rsa-pub文件内容"><a href="#5-查看id-rsa-pub文件内容" class="headerlink" title="(5)查看id_rsa.pub文件内容"></a>(5)查看id_rsa.pub文件内容</h4><pre class="line-numbers language-git" data-language="git"><code class="language-git">cat id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-复制id-rsa-pub文件内容，登录GitHub，点击用户头像→Settings→SSH-and-GPG-keys"><a href="#6-复制id-rsa-pub文件内容，登录GitHub，点击用户头像→Settings→SSH-and-GPG-keys" class="headerlink" title="(6)复制id_rsa.pub文件内容，登录GitHub，点击用户头像→Settings→SSH and GPG keys"></a>(6)复制id_rsa.pub文件内容，登录GitHub，点击用户头像→Settings→SSH and GPG keys</h4><h4 id="7-New-SSH-Key"><a href="#7-New-SSH-Key" class="headerlink" title="(7)New SSH Key"></a>(7)New SSH Key</h4><h4 id="8-输入复制的密钥信息"><a href="#8-输入复制的密钥信息" class="headerlink" title="(8)输入复制的密钥信息"></a>(8)输入复制的密钥信息</h4><h4 id="9-回到Git-bash创建远程地址别名"><a href="#9-回到Git-bash创建远程地址别名" class="headerlink" title="(9)回到Git bash创建远程地址别名"></a>(9)回到Git bash创建远程地址别名</h4><pre class="line-numbers language-git" data-language="git"><code class="language-git">git remote add origin_ssh git@github.com:atguigu2018ybuq/huashan.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="10-推送文件进行测试"><a href="#10-推送文件进行测试" class="headerlink" title="(10)推送文件进行测试"></a>(10)推送文件进行测试</h4><h2 id="七-Eclipse操作"><a href="#七-Eclipse操作" class="headerlink" title="七.Eclipse操作"></a>七.Eclipse操作</h2><h2 id="八-Git工作流"><a href="#八-Git工作流" class="headerlink" title="八.Git工作流"></a>八.Git工作流</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>在项目开发过程中使用Git的方式</p><h3 id="2-分类"><a href="#2-分类" class="headerlink" title="2.分类"></a>2.分类</h3><h4 id="1-集中式工作流"><a href="#1-集中式工作流" class="headerlink" title="(1)集中式工作流"></a>(1)集中式工作流</h4><p>像SVN一样，集中式工作流以中央仓库作为项目所有修改的单点实体。所有修改都提交到Master这个分支上。</p><p>这种方式与SVN的主要区别就是开发人员有本地库。Git很多特性并没有用到。</p><p><img src="/2021/11/01/git-guide/image-20200912150638369.png"></p><h4 id="2-GitFlow工作流"><a href="#2-GitFlow工作流" class="headerlink" title="(2)GitFlow工作流"></a>(2)GitFlow工作流</h4><p>GitFlow工作流通过为功能开发、发布准备和维护设立了独立的分支，让发布迭代过程更流畅。严格的分支模型也为大型项目提供了一些非常必要的结构。</p><p><img src="/2021/11/01/git-guide/image-20200912150830534.png"></p><h4 id="3-Forking工作流"><a href="#3-Forking工作流" class="headerlink" title="(3)Forking工作流"></a>(3)Forking工作流</h4><p>Forking工作流是在GitFlow基础上，充分利用了Git的Fork和pull request的功能以达到代码审核的目的。更适合安全可靠地管理大团队地开发者，而且能接受不信任贡献者地提交。</p><p><img src="/2021/11/01/git-guide/image-20200912151340497.png"></p><h3 id="3-GitFlow工作流详解"><a href="#3-GitFlow工作流详解" class="headerlink" title="3.GitFlow工作流详解"></a>3.GitFlow工作流详解</h3><h4 id="1-分支种类"><a href="#1-分支种类" class="headerlink" title="(1)分支种类"></a>(1)分支种类</h4><h5 id="a-主干分支-master"><a href="#a-主干分支-master" class="headerlink" title="a.主干分支 master"></a>a.主干分支 master</h5><p>主要负责管理正在运行地生产环境代码。永远保持与正在运行的生产环境完全一致</p><h5 id="b-开发分支-develop"><a href="#b-开发分支-develop" class="headerlink" title="b.开发分支 develop"></a>b.开发分支 develop</h5><p>主要负责管理正在开发过程中的代码。一般情况下应该是最新的代码。</p><h5 id="c-bug修理分支-hotfix"><a href="#c-bug修理分支-hotfix" class="headerlink" title="c.bug修理分支 hotfix"></a>c.bug修理分支 hotfix</h5><p>主要负责管理生产环境下出现的紧急修复的代码。从主干分支分出，修理完毕并测试上线后，并回主干分支。并回后，视情况可以删除该分支。</p><h5 id="d-准生产分支-预发布分支-release"><a href="#d-准生产分支-预发布分支-release" class="headerlink" title="d.准生产分支(预发布分支) release"></a>d.准生产分支(预发布分支) release</h5><p>较大的版本上线前，会从开发分支中分出准生产分支，进行最后阶段的集成测试。该版本上线后，会合并到主干分支。生产环境运行一段阶段较稳定后可以视情况删除。</p><h5 id="e-功能分支-feature"><a href="#e-功能分支-feature" class="headerlink" title="e.功能分支 feature"></a>e.功能分支 feature</h5><p>为了不影响较短周期的开发工作，一般把中长期开发模块，会从开发分支中独立出来。开发完成后会合并到开发分支。</p><h4 id="2-GitFlow工作流举例"><a href="#2-GitFlow工作流举例" class="headerlink" title="(2)GitFlow工作流举例"></a>(2)GitFlow工作流举例</h4><p><img src="/2021/11/01/git-guide/image-20200912152200388.png"></p><h4 id="3-分支实战"><a href="#3-分支实战" class="headerlink" title="(3)分支实战"></a>(3)分支实战</h4><p><img src="/2021/11/01/git-guide/image-20200912152148221.png"></p><h4 id="4-具体操作"><a href="#4-具体操作" class="headerlink" title="(4)具体操作"></a>(4)具体操作</h4><p>①创建分支</p><p><img src="/2021/11/01/git-guide/image-20200912152311010.png"></p><p><img src="/2021/11/01/git-guide/image-20200912152329824.png"></p><p>②切换分支审查代码</p><p><img src="/2021/11/01/git-guide/image-20200912152404719.png"></p><p><img src="/2021/11/01/git-guide/image-20200912152421098.png"></p><p><img src="/2021/11/01/git-guide/image-20200912152434413.png"></p><p>③检出远程新分支</p><p><img src="/2021/11/01/git-guide/image-20200912152536747.png"></p><p>④切换回master</p><p><img src="/2021/11/01/git-guide/image-20200912152623645.png"></p><p>⑤合并分支</p><p><img src="/2021/11/01/git-guide/image-20200912152638597.png"></p><p>⑥合并结果</p><p><img src="/2021/11/01/git-guide/image-20200912152712014.png"></p><p>合并成功后，把master推送到远程。</p><h2 id="九-GitLab服务器搭建过程"><a href="#九-GitLab服务器搭建过程" class="headerlink" title="九.GitLab服务器搭建过程"></a>九.GitLab服务器搭建过程</h2><h3 id="1-官网地址"><a href="#1-官网地址" class="headerlink" title="1.官网地址"></a>1.官网地址</h3><p><a href="https://about.gitlab.com/">首页</a></p><p><a href="https://about.gitlab.com/installation/">安装说明</a></p><h3 id="2-安装命令摘录"><a href="#2-安装命令摘录" class="headerlink" title="2.安装命令摘录"></a>2.安装命令摘录</h3><p><img src="/2021/11/01/git-guide/image-20200912153010367.png"></p><h3 id="3-调整后的安装过程"><a href="#3-调整后的安装过程" class="headerlink" title="3.调整后的安装过程"></a>3.调整后的安装过程</h3><p><img src="/2021/11/01/git-guide/image-20200912153050448.png"></p><p>当前步骤完成后重启</p><h3 id="4-GitLab服务操作"><a href="#4-GitLab服务操作" class="headerlink" title="4.GitLab服务操作"></a>4.GitLab服务操作</h3><p>①初始化配置gitlab</p><pre class="line-numbers language-gitlab" data-language="gitlab"><code class="language-gitlab">gitlab-ctl reconfigure<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>②启动gitlab服务</p><pre class="line-numbers language-gitlab" data-language="gitlab"><code class="language-gitlab">gitlab-ctl start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>③停止gitlab服务</p><pre class="line-numbers language-gitlab" data-language="gitlab"><code class="language-gitlab">gitlab-ctl stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-浏览器访问"><a href="#5-浏览器访问" class="headerlink" title="5.浏览器访问"></a>5.浏览器访问</h3><p><img src="/2021/11/01/git-guide/image-20200912153348920.png"></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.runoob.com/git/git-remote-repo.html">https://www.runoob.com/git/git-remote-repo.html</a></p><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%AE%B">https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%AE%B</a> re0%E5%BD%95%E6%AF%8F%E6%AC%A1%E6%9B%B4%E6%96%B0%E5%88%B0%E4%BB%93%E5%BA%93</p><p><a href="https://www.toutiao.com/i6675555153799545355/?tt_from=weixin&amp;utm_campaign=client_share&amp;wxshare_count=1&amp;timestamp=1600127841&amp;app=news_article&amp;utm_source=weixin&amp;utm_medium=toutiao_android&amp;use_new_style=1&amp;req_id=202009150757210100160410540620006D&amp;group_id=6675555153799545355">https://www.toutiao.com/i6675555153799545355/?tt_from=weixin&amp;utm_campaign=client_share&amp;wxshare_count=1&amp;timestamp=1600127841&amp;app=news_article&amp;utm_source=weixin&amp;utm_medium=toutiao_android&amp;use_new_style=1&amp;req_id=202009150757210100160410540620006D&amp;group_id=6675555153799545355</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> GIT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/11/01/hello-world/"/>
      <url>/2021/11/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
